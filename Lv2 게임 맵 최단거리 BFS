#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// 상 하 좌 우
const int dx[] = { -1, 1, 0, 0 };
const int dy[] = { 0, 0, -1, 1 };

// maps 범위내인지 확인하는 함수
bool checkTurn(int x, int y, int n, int m) {
    return x >= 0 && y >= 0 && x < n && y < m;
}

// BFS로 최단 경로 탐색
int solution(vector<vector<int>> maps) {
    int answer = 0;
    queue<pair<int, int>> q;
    q.push({ 0,0 });
    maps[0][0] = 2;
    
    int n = maps.size();
    int m = maps[0].size();

    while (!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();

        // 상 하 좌 우 탐색
        for (int i = 0; i < 4; ++i) {
            int dirX = x + dx[i];
            int dirY = y + dy[i];

            // 미로 범위 이내, 탐색하지 않은 길인 경우
            if (checkTurn(dirX, dirY, n, m) && maps[dirX][dirY] == 1) {
                maps[dirX][dirY] = maps[x][y] + 1;
                q.push({ dirX, dirY });
            }
        }
    }

    // 상대팀 진영에 도달했다면 최단 경로 반환
    // 도달할 수 없다면 -1 반환
    maps[n - 1][m - 1] += maps[n - 1][m - 1] > 1 ? -1 : -2;
    return maps[n - 1][m - 1];
}

int main() {
    // 미로 정보 2차원 배열
    vector<vector<int>> maps {
        { 1,0,1,1,1 },
        { 1,0,1,0,1 },
        { 1,0,1,1,1 },
        { 1,1,1,0,1 },
        { 0,0,0,0,1 }
    };

    cout << solution(maps);

    return 0;
}
