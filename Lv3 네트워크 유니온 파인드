#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> parent;

void init(int n) {
    parent.resize(n);
    for (int i = 0; i < n; ++i)
        parent[i] = i;
}

int find(int x) {
    if (parent[x] == x)
        return x;
    return parent[x] = find(parent[x]);
}

void merge(int x, int y) {
    x = find(x);
    y = find(y);
    if (x == y)
        return;
    parent[y] = x;
}

bool isUnion(int x, int y) {
    x = find(x);
    y = find(y);
    if (x == y)
        return true;
    return false;
}

int solution(int n, vector<vector<int>> computers) {
    init(n);
    int result = n;

    for (int x = 0; x < n; ++x) {
        for (int y = 0; y < n; ++y) {
            if (!isUnion(x, y) && computers[x][y] == 1) {
                if (find(x) != find(y)) {
                    merge(x, y);
                    result--;
                }
            }
        }
    }
    return result;
}

int main()
{
    int n = 7;
    vector<vector<int>> computers = {
                {1,0,0,0,0,0,1},
                {0,1,1,0,1,0,0},
                {0,1,1,1,0,0,0},
                {0,0,1,1,0,0,0},
                {0,1,0,0,1,1,0},
                {0,0,0,0,1,1,1},
                {1,0,0,0,0,1,1}
    };
    
    clock_t start, finish;
    double duration;

    start = clock();

    cout << solution(n, computers);

    finish = clock();

    duration = (double)(finish - start) / CLOCKS_PER_SEC;
    cout << "\n" << duration << "ì´ˆ" << endl;
    return 0;
}
